using D2NG.Core.D2GS.Enums;
using D2NG.Core.D2GS.Helpers;
using D2NG.Core.MCP.Packet;
using Xunit;

namespace D2NG.Core.Tests.MCP
{
    public class PacketTest
    {


        [Fact]
        public void ListCharactersClientPacket()
        {
            var packet = new ListCharactersClientPacket();
            Assert.Equal(new byte[] { 0x07, 0x00, 0x17, 0x08, 0x00, 0x00, 0x00 }, packet.Raw);
        }

        [Fact]
        public void ListCharactersServerPacketSingleCharacter()
        {
            var bytes = new byte[] { 0x31, 0x00, 0x17, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x65, 0x72, 0x61, 0x00, 0x84, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x81, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00 };
            var packet = new ListCharactersServerPacket(bytes);
            Assert.Single(packet.Characters);
            Assert.Equal("era", packet.Characters[0].Name);
            Assert.Equal((uint)1, packet.Characters[0].Level);

        }

        [Fact]
        public void ListCharactersServerPacketNoCharacters()
        {
            var bytes = new byte[] { 0x0B, 0x00, 0x17, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var packet = new ListCharactersServerPacket(bytes);
            Assert.Empty(packet.Characters);
        }
        
        [Fact]
        public void ListCharactersServerPacketExpansionAndHardcore()
        {
            var bytes = new byte[] { 0xA3, 0x00, 0x17, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x79, 0x72, 0x77, 0x00, 0x84, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x85, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x71, 0x65, 0x64, 0x00, 0x84, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xA1, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x71, 0x72, 0x64, 0x00, 0x84, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xA5, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x65, 0x71, 0x72, 0x00, 0x84, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x81, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00 };
            var packet = new ListCharactersServerPacket(bytes);
            Assert.Equal("yrw", packet.Characters[0].Name);
            Assert.False(packet.Characters[0].IsExpansion);
            Assert.True(packet.Characters[0].IsHardCore);
            Assert.Equal("qed", packet.Characters[1].Name);
            Assert.True(packet.Characters[1].IsExpansion);
            Assert.False(packet.Characters[1].IsHardCore);
            Assert.Equal("qrd", packet.Characters[2].Name);
            Assert.True(packet.Characters[2].IsExpansion);
            Assert.True(packet.Characters[2].IsHardCore);
            Assert.Equal("eqr", packet.Characters[3].Name);
            Assert.False(packet.Characters[3].IsExpansion);
            Assert.False(packet.Characters[3].IsHardCore);
        }

        [Fact]
        public void CreateGameRequestPacket()
        {
            byte[] expected = new byte[] { 0x19, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0xFF, 0x08, 0x74, 0x65, 0x73, 0x74, 0x00, 0x42, 0x6C, 0x61, 0x00, 0x47, 0x53, 0x32, 0x00 };
            var packet = new CreateGameRequestPacket(0, Difficulty.Hell, "test", "bla", "GS2");

            Assert.Equal(25, packet.Raw.Length);
            Assert.Equal(expected, packet.Raw);
        }

    }
}
